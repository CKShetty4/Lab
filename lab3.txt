//3D
#include <stdio.h>
#include <stdlib.h>

int findpath(int G[2][5][5], int layer, int V, int E, int edge[20][2], int S) {
    int i, u, v, k, distance[20], parent[20], flag = 1;

    for (i = 0; i < V; i++)
        distance[i] = 1000, parent[i] = -1;

    distance[S] = 0;

    for (i = 0; i < V - 1; i++) {
        for (k = 0; k < E; k++) {
            u = edge[k][0];
            v = edge[k][1];

            if (G[layer][u][v] != 0 && distance[u] + G[layer][u][v] < distance[v]) {
                distance[v] = distance[u] + G[layer][u][v];
                parent[v] = u;
            }
        }
    }

    for (k = 0; k < E; k++) {
        u = edge[k][0];
        v = edge[k][1];

        if (G[layer][u][v] != 0 && distance[u] + G[layer][u][v] < distance[v])
            flag = 0;  // Negative cycle detected
    }

    printf("Vertex\tCost\n");
    if (flag) {
        for (i = 0; i < V; i++)
            printf("%d\t%d\n", i + 1, distance[i]);
    } else {
        printf("Negative weight cycle detected!\n");
    }

    return flag;
}

int main() {
    int V, edge[20][2], i, j, k = 0;

    printf("Enter no. of vertices: ");
    scanf("%d", &V);

    int G[2][5][5] = {
        {
            {0, 7, 0, 4, 0},
            {7, 0, 6, 0, 0},
            {0, 6, 0, 1, 10},
            {4, 0, 1, 0, 8},
            {0, 0, 10, 8, 0}
        },
        {
            {0, 5, 0, 3, 0},
            {5, 0, 2, 0, 0},
            {0, 2, 0, 4, 6},
            {3, 0, 4, 0, 7},
            {0, 0, 6, 7, 0}
        }
    };

    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            if (G[0][i][j] != 0) { // Using the first layer to extract edges
                edge[k][0] = i;
                edge[k][1] = j;
                k++;
            }
        }
    }

    for (int layer = 0; layer < 2; layer++) {
        printf("\nGraph Layer %d:\n", layer + 1);
        for (i = 0; i < V; i++) {
            printf("\nSource Vertex %d:\n", i + 1);
            findpath(G, layer, V, k, edge, i);
        }
    }

    return 0;
}

_______________________________________________________
//2D

#include <stdio.h>
#include <stdlib.h>

int findpath(int G[5][5], int V, int E, int edge[20][2], int S) {
    int i, u, v, k, distance[20], parent[20], flag = 1;

    for (i = 0; i < V; i++)
        distance[i] = 1000, parent[i] = -1;

    distance[S] = 0;

    for (i = 0; i < V - 1; i++) {
        for (k = 0; k < E; k++) {
            u = edge[k][0];
            v = edge[k][1];

            if (G[u][v] != 0 && distance[u] + G[u][v] < distance[v]) {
                distance[v] = distance[u] + G[u][v];
                parent[v] = u;
            }
        }
    }

    for (k = 0; k < E; k++) {
        u = edge[k][0];
        v = edge[k][1];

        if (G[u][v] != 0 && distance[u] + G[u][v] < distance[v])
            flag = 0;  // Negative cycle detected
    }

    printf("Vertex\tCost\n");
    if (flag) {
        for (i = 0; i < V; i++)
            printf("%d\t%d\n", i + 1, distance[i]);
    } else {
        printf("Negative weight cycle detected!\n");
    }

    return flag;
}

int main() {
    int V, edge[20][2], i, j, k = 0;

    printf("Enter no. of vertices: ");
    scanf("%d", &V);

    int G[5][5] = {
        {0, 7, 0, 4, 0},
        {7, 0, 6, 0, 0},
        {0, 6, 0, 1, 10},
        {4, 0, 1, 0, 8},
        {0, 0, 10, 8, 0}
    };

    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            if (G[i][j] != 0) {
                edge[k][0] = i;
                edge[k][1] = j;
                k++;
            }
        }
    }

    for (i = 0; i < V; i++) {
        printf("\nSource Vertex %d:\n", i + 1);
        findpath(G, V, k, edge, i);
    }

    return 0;
}
